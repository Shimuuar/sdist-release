#!/usr/bin/env python3
"""
Program for generating source distributions for haskell packages from
clean checkout
"""

import glob
import sys
import os
import os.path
import configparser
import subprocess
import tempfile
import argparse

class WorkDir:
    def __init__(self, path):
        self.path = path
        self.old  = os.getcwd()
    def __enter__(self):
        os.chdir(self.path)
        return
    def __exit__(self, exc_type, exc_val, exc_tb):
        os.chdir(self.old)

def parse_config():
    "Read configuration file"
    XDG  = os.environ.get('XDG_CONFIG_HOME')
    path = os.path.join(os.environ['HOME'], ".config") if (XDG is None) else XDG
    path = os.path.join(path, "sdist-release.ini")
    cfg  = configparser.ConfigParser()
    cfg.read(path)
    return cfg

def run(args) :
    "Shell out"
    subprocess.run(args).check_returncode()

# Command line parser
parser = argparse.ArgumentParser(
    prog        = 'sdist-release',
    description = \
'''Tool for preparing hackage releases from git repositories. It
downloads source given tag so it avoids possible local modifications
and releases from wrong branch.''',
)
parser.add_argument('package')
parser.add_argument('tag')
# Read command and configuration
args = parser.parse_args()
package = args.package
tag     = args.tag
section = parse_config()[package]

# Now prepare source distribution:
cwd = os.getcwd()
with tempfile.TemporaryDirectory() as tmp_dir:
    with WorkDir(tmp_dir):
        if "github" in section :
            repo = section["github"]
            run(["wget",
                 "https://github.com/%s/archive/%s.zip" % (repo, tag),
                 "-O", "archive.zip"
                 ])
            run(["unzip", "archive.zip"])
            os.chdir([ d for d in glob.glob("*") if os.path.isdir(d) ][0])
            if "subdir" in section:
                os.chdir(section["subdir"])
            run(["cabal", "sdist", "--output-directory", cwd])
        else:
            raise Exception("Don't know what to do")
